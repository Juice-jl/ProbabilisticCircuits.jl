var documenterSearchIndex = {"docs":
[{"location":"api/internals/utils/#api-internal-utils-1","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"api/internals/utils/#","page":"Utils","title":"Utils","text":"Modules = [ProbabilisticCircuits.Utils]","category":"page"},{"location":"api/internals/utils/#ProbabilisticCircuits.Utils","page":"Utils","title":"ProbabilisticCircuits.Utils","text":"Module with general utilities and missing standard library features  that could be useful in any Julia project\n\n\n\n\n\n","category":"module"},{"location":"api/internals/utils/#ProbabilisticCircuits.Utils.generate_all-Tuple{Array{T,1} where T}","page":"Utils","title":"ProbabilisticCircuits.Utils.generate_all","text":"Given some missing values generates all possible fillings\n\n\n\n\n\n","category":"method"},{"location":"api/internals/utils/#ProbabilisticCircuits.Utils.generate_data_all-Tuple{Int64}","page":"Utils","title":"ProbabilisticCircuits.Utils.generate_data_all","text":"Generates all possible binary configurations of size N\n\n\n\n\n\n","category":"method"},{"location":"api/internals/utils/#ProbabilisticCircuits.Utils.mutual_information","page":"Utils","title":"ProbabilisticCircuits.Utils.mutual_information","text":"Calculate mutual information of given bit matrix bm, example weights w, and smoothing pseudocount α\n\n\n\n\n\n","category":"function"},{"location":"api/internals/utils/#ProbabilisticCircuits.Utils.set_mutual_information-Tuple{Array{T,2} where T,AbstractArray{var\"#s28\",1} where var\"#s28\"<:(AbstractArray{T,1} where T)}","page":"Utils","title":"ProbabilisticCircuits.Utils.set_mutual_information","text":"Calculate set mutual information\n\n\n\n\n\n","category":"method"},{"location":"api/internals/utils/#ProbabilisticCircuits.Utils.DisCache","page":"Utils","title":"ProbabilisticCircuits.Utils.DisCache","text":"Cache pairwise / marginal distribution for all variables in one dataset\n\n\n\n\n\n","category":"type"},{"location":"api/internals/utils/#ProbabilisticCircuits.Utils.one_hot_encode-Union{Tuple{T}, Tuple{Array{T,2},Array{T,1}}} where T","page":"Utils","title":"ProbabilisticCircuits.Utils.one_hot_encode","text":"One-hot encode data (2-D Array) based on categories (1-D Array) Each row of the return value is a concatenation of one-hot encoding of elements of the same row in data Assumption: both input arrays have elements of same type\n\n\n\n\n\n","category":"method"},{"location":"api/types/#api-types-1","page":"Type Trees","title":"Type Trees","text":"","category":"section"},{"location":"api/types/#","page":"Type Trees","title":"Type Trees","text":"The following code snippet provides an easy way to print the type tree of probabilistic circuits.","category":"page"},{"location":"api/types/#","page":"Type Trees","title":"Type Trees","text":"using InteractiveUtils;\nusing ProbabilisticCircuits;\nusing AbstractTrees;\nAbstractTrees.children(x::Type) = subtypes(x);","category":"page"},{"location":"api/types/#","page":"Type Trees","title":"Type Trees","text":"For example, we can see ProbabilisticCircuits.ProbCircuit's type tree.","category":"page"},{"location":"api/types/#","page":"Type Trees","title":"Type Trees","text":"AbstractTrees.print_tree(ProbCircuit)","category":"page"},{"location":"api/types/#","page":"Type Trees","title":"Type Trees","text":"Alternatively, here's ProbabilisticCircuits.LogisticCircuit's type tree.","category":"page"},{"location":"api/types/#","page":"Type Trees","title":"Type Trees","text":"AbstractTrees.print_tree(LogisticCircuit)","category":"page"},{"location":"api/internals/logistic/#api-internal-logistic-1","page":"Logistic Circuits","title":"Logistic Circuits","text":"","category":"section"},{"location":"api/internals/logistic/#","page":"Logistic Circuits","title":"Logistic Circuits","text":"Modules = [ProbabilisticCircuits.Logistic]","category":"page"},{"location":"api/internals/logistic/#ProbabilisticCircuits.Logistic.class_likelihood_per_instance-Tuple{LogisticCircuit,Int64,Any}","page":"Logistic Circuits","title":"ProbabilisticCircuits.Logistic.class_likelihood_per_instance","text":"Class Conditional Probability\n\n\n\n\n\n","category":"method"},{"location":"api/internals/logistic/#ProbabilisticCircuits.Logistic.learn_parameters-Tuple{LogisticCircuit,Int64,Any,Any}","page":"Logistic Circuits","title":"ProbabilisticCircuits.Logistic.learn_parameters","text":"Parameter learning through gradient descents Note: data need to be DataFrame and Labels need to be in one-hot form.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/logistic/#ProbabilisticCircuits.Logistic.accuracy-Tuple{LogisticCircuit,Int64,Any,Array{T,1} where T}","page":"Logistic Circuits","title":"ProbabilisticCircuits.Logistic.accuracy","text":"Prediction accuracy\n\n\n\n\n\n","category":"method"},{"location":"api/internals/logistic/#ProbabilisticCircuits.Logistic.predict_class-Tuple{LogisticCircuit,Int64,Any}","page":"Logistic Circuits","title":"ProbabilisticCircuits.Logistic.predict_class","text":"Class Predictions\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#api-internal-probabilistic-1","page":"Probabilistic Circuits","title":"Probabilistic Circuits","text":"","category":"section"},{"location":"api/internals/probabilistic_circuits/#","page":"Probabilistic Circuits","title":"Probabilistic Circuits","text":"Modules = [ProbabilisticCircuits]","category":"page"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.CLT","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.CLT","text":"Chow-Liu Tree\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.ExpFlowCircuit-Union{Tuple{El}, Tuple{ProbCircuit,LogisticCircuit,Int64,Type{El}}} where El","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.ExpFlowCircuit","text":"Construct a upward expectation flow circuit from a given pair of PC and LC circuits Note that its assuming the two circuits share the same vtree\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.LogisticCircuit","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.LogisticCircuit","text":"Root of the logistic circuit node hierarchy\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.LogisticInnerNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.LogisticInnerNode","text":"A logistic inner node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.LogisticLeafNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.LogisticLeafNode","text":"A logistic leaf node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.LogisticLiteralNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.LogisticLiteralNode","text":"A logistic literal node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.Logistic⋀Node","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.Logistic⋀Node","text":"A logistic conjunction node (And node)\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.Logistic⋁Node","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.Logistic⋁Node","text":"A logistic disjunction node (Or node)\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.ParamBitCircuit","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.ParamBitCircuit","text":"A BitCircuit with parameters attached to the elements\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.PlainMulNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.PlainMulNode","text":"A probabilistic conjunction node (multiplication node)\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.PlainProbCircuit","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.PlainProbCircuit","text":"Root of the plain probabilistic circuit node hierarchy\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.PlainProbInnerNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.PlainProbInnerNode","text":"A probabilistic inner node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.PlainProbLeafNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.PlainProbLeafNode","text":"A probabilistic leaf node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.PlainProbLiteralNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.PlainProbLiteralNode","text":"A probabilistic literal node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.PlainSumNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.PlainSumNode","text":"A probabilistic disjunction node (summation node)\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.ProbCircuit","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.ProbCircuit","text":"Root of the probabilistic circuit node hierarchy\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.SharedMulNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.SharedMulNode","text":"A shared probabilistic multiplcation node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.SharedProbCircuit","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.SharedProbCircuit","text":"Root of the shared probabilistic circuit node hierarchy\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.SharedProbInnerNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.SharedProbInnerNode","text":"A shared probabilistic inner node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.SharedProbLeafNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.SharedProbLeafNode","text":"A shared probabilistic leaf node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.SharedProbLiteralNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.SharedProbLiteralNode","text":"A shared probabilistic literal node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.SharedSumNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.SharedSumNode","text":"A shared probabilistic summation node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.StructMulNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.StructMulNode","text":"A plain structured probabilistic conjunction node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.StructProbCircuit","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.StructProbCircuit","text":"Root of the plain structure probabilistic circuit node hierarchy\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.StructProbInnerNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.StructProbInnerNode","text":"A plain structured probabilistic inner node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.StructProbLeafNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.StructProbLeafNode","text":"A plain structured probabilistic leaf node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.StructProbLiteralNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.StructProbLiteralNode","text":"A plain structured probabilistic literal leaf node, representing the positive or negative literal of its variable\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.StructSumNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.StructSumNode","text":"A plain structured probabilistic disjunction node\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.EVI","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.EVI","text":"EVI(pc, data)\n\nComputes the log likelihood data given full evidence. Outputs logp(x) for each datapoint.\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.Expectation-Tuple{ProbCircuit,LogisticCircuit,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.Expectation","text":"Missing values should be denoted by missing\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.ExpectationUpward-Tuple{ProbCircuit,LogisticCircuit,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.ExpectationUpward","text":"Expected Prediction of LC w.r.t PC. This implementation uses the computation graph approach.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.MAP","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.MAP","text":"Maximum a-posteriori queries\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.MAR","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.MAR","text":"MAR(pc, data)\n\nComputes Marginal log likelhood of data.  Outputs logp(x^o) for each data point.  Missing values should be denoted by missing in the data.\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.compile_sdd_from_clt-Tuple{MetaGraphs.MetaDiGraph,LogicCircuits.PlainVtree}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.compile_sdd_from_clt","text":"Compile a psdd circuit from clt and vtree\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.estimate_parameters-Tuple{ProbCircuit,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.estimate_parameters","text":"Maximum likilihood estimation of parameters given data\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.estimate_parameters_em-Tuple{ProbCircuit,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.estimate_parameters_em","text":"Expectation maximization parameter learning given missing data\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.ismul-Tuple{Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.ismul","text":"Is the node a multiplication?\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.issum-Tuple{Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.issum","text":"Is the node a summation?\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.kl_divergence","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.kl_divergence","text":"Calculate KL divergence calculation for pcs that are not necessarily identical\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.learn_chow_liu_tree-Tuple{Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.learn_chow_liu_tree","text":"learn a Chow-Liu tree from training set train_x, with Laplace smoothing factor α, specifying the tree root by clt_root return a CLT\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.learn_chow_liu_tree_circuit-Tuple{Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.learn_chow_liu_tree_circuit","text":"Learning from data a structured-decomposable circuit with several structure learning algorithms\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.learn_single_model-Tuple{Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.learn_single_model","text":"Learn structure decomposable circuits\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.learn_vtree_from_clt-Tuple{MetaGraphs.MetaDiGraph}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.learn_vtree_from_clt","text":"Learn a vtree from clt, with strategy (close to) linear or balanced\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.log_likelihood-Tuple{Any,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.log_likelihood","text":"log_likelihood(pc, data)\n\nCompute the likelihood of the PC given the data\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.log_likelihood_avg-Tuple{Any,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.log_likelihood_avg","text":"log_likelihood_avg(pc, data)\n\nCompute the likelihood of the PC given the data, averaged over all instances in the data\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.log_likelihood_per_instance-Tuple{ProbCircuit,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.log_likelihood_per_instance","text":"Compute the likelihood of the PC given each individual instance in the data\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal-Tuple{ProbCircuit,Vararg{Union{Missing, Real},N} where N}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal","text":"Evaluate marginals of the circuit bottom-up for a given input\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_all-Tuple{ProbCircuit,DataFrames.DataFrame}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_all","text":"Evaluate the probabilistic circuit bottom-up for a given input and return the marginal probability value of all nodes\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_flows","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_flows","text":"Compute the marginal and flow of each node\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_flows_down","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_flows_down","text":"When marginals of nodes have already been computed, do a downward pass computing the marginal flows at each node\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_log_likelihood-Tuple{Any,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_log_likelihood","text":"Compute the marginal likelihood of the PC given the data\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_log_likelihood_avg-Tuple{Any,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_log_likelihood_avg","text":"Compute the marginal likelihood of the PC given the data, averaged over all instances in the data\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.max_a_posteriori-Tuple{ProbCircuit,Vararg{Union{Missing, Bool},N} where N}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.max_a_posteriori","text":"Evaluate maximum a-posteriori state of the circuit for a given input\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.mul_nodes-Tuple{ProbCircuit}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.mul_nodes","text":"Get the list of multiplication nodes in a given circuit\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.multiply","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.multiply","text":"Multiply nodes into a single circuit\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.num_components-Tuple{SharedSumNode}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.num_components","text":"How many components are mixed together in this shared circuit?\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.num_parameters-Tuple{ProbCircuit}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.num_parameters","text":"Count the number of parameters in the circuit\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.num_parameters_node-Tuple{PlainSumNode}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.num_parameters_node","text":"Count the number of parameters in the node\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.params-Tuple{Logistic⋁Node}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.params","text":"Get the parameters associated with a or node\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.params-Tuple{ProbCircuit}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.params","text":"Get the parameters associated with a sum node\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.parent_vector-Tuple{MetaGraphs.MetaDiGraph}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.parent_vector","text":"Get parent vector of a tree\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.pr_constraint","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.pr_constraint","text":"Calculate the probability of the logic formula given by LC for the PC\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.sample-Tuple{ProbCircuit}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.sample","text":"Sample states from the circuit distribution.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.sum_nodes-Tuple{ProbCircuit}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.sum_nodes","text":"Get the list of summation nodes in a given circuit\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.summate","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.summate","text":"Sum nodes into a single circuit\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.to_sampled_dataframes-Tuple{Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.to_sampled_dataframes","text":"Convert an array of samples into a vector of dataframes\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.uniform_parameters-Tuple{ProbCircuit}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.uniform_parameters","text":"Uniform distribution\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.ExpFlowNode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.ExpFlowNode","text":"A expectation circuit node that has pair of origins of type PC and type LC\n\n\n\n\n\n","category":"type"},{"location":"api/internals/probabilistic_circuits/#LogicCircuits.Utils.print_tree-Tuple{MetaGraphs.MetaDiGraph}","page":"Probabilistic Circuits","title":"LogicCircuits.Utils.print_tree","text":"Print edges and vertices of a ChowLiu tree\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#LogicCircuits.vtree-Tuple{StructProbCircuit}","page":"Probabilistic Circuits","title":"LogicCircuits.vtree","text":"Get the vtree corresponding to the argument, or nothing if the node has no vtree\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.blossom_bottom_up-Tuple{DataFrames.DataFrame}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.blossom_bottom_up","text":"Blossom bottom up method, vars are not used\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.compile_canonical_literals-Tuple{UInt32,LogicCircuits.PlainVtreeLeafNode}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.compile_canonical_literals","text":"Construct literal nodes given variable var\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.compile_decision_node-Tuple{Array{var\"#s40\",1} where var\"#s40\"<:LogicCircuits.PlainStructLogicCircuit,Array{var\"#s39\",1} where var\"#s39\"<:LogicCircuits.PlainStructLogicCircuit,LogicCircuits.PlainVtreeInnerNode}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.compile_decision_node","text":"Construct decision nodes given primes and subs\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.compile_decision_nodes-Tuple{Array{var\"#s37\",1} where var\"#s37\"<:LogicCircuits.PlainStructLogicCircuit,Array{var\"#s36\",1} where var\"#s36\"<:LogicCircuits.PlainStructLogicCircuit,LogicCircuits.PlainVtreeInnerNode}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.compile_decision_nodes","text":"Construct decision nodes conditiond on different distribution\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.compile_true_nodes-Tuple{UInt32,LogicCircuits.PlainVtreeLeafNode}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.compile_true_nodes","text":"Construct true nodes given variable var\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.eFlow-Tuple{Any,Any,Array{Tuple{LogicCircuits.Utils.Node,LogicCircuits.Utils.Node},1}}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.eFlow","text":"Pick the edge with maximum flow\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.eRand-Tuple{Array{Tuple{LogicCircuits.Utils.Node,LogicCircuits.Utils.Node},1}}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.eRand","text":"Pick the edge randomly\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.exp_f-Tuple{Union{PlainProbLiteralNode, StructProbLiteralNode},Logistic⋁Node,Any,Union{ProbabilisticCircuits.ExpectationCache, ProbabilisticCircuits.MomentCache}}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.exp_f","text":"Has to be a Logistic⋁Node with only one child, which is a leaf node \n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.exp_fg-Tuple{Union{PlainProbLiteralNode, StructProbLiteralNode},Logistic⋁Node,Any,ProbabilisticCircuits.ExpectationCache}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.exp_fg","text":"Has to be a Logistic⋁Node with only one child, which is a leaf node \n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.get_cpt-Tuple{Any,Any,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.get_cpt","text":"Calculate CPT of child conditioned on parent from dis_cache\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.init_marginal-Tuple{Any,Any,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.init_marginal","text":"Initialize values from the data (data frames)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.map_child-NTuple{6,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.map_child","text":"Find the MAP child value and node id of a given decision node\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_flows_down_layers-Tuple{ParamBitCircuit,Array{T,2} where T,Array{T,2} where T,Any,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_flows_down_layers","text":"Evaluate marginals of the layers of a bit circuit on the CPU (SIMD & multi-threaded)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_flows_down_layers-Tuple{ParamBitCircuit,CUDA.CuArray{T,2} where T,CUDA.CuArray{T,2} where T,Any,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_flows_down_layers","text":"Pass marginal flows down the layers of a bit circuit on the GPU\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_flows_down_layers_cuda-NTuple{9,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_flows_down_layers_cuda","text":"CUDA kernel for passing marginal flows down circuit\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_layers-Tuple{ParamBitCircuit,Array{T,2} where T}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_layers","text":"Compute marginals on the CPU (SIMD & multi-threaded)\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_layers-Tuple{ParamBitCircuit,CUDA.CuArray{T,2} where T}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_layers","text":"Compute marginals on the GPU\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.marginal_layers_cuda-NTuple{5,Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.marginal_layers_cuda","text":"CUDA kernel for circuit evaluation\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.metis_top_down-Tuple{DataFrames.DataFrame}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.metis_top_down","text":"Metis top down method\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.mode","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.mode","text":"Mode of the distribution\n\n\n\n\n\n","category":"function"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.moment_fg-Tuple{Union{PlainSumNode, StructSumNode},Logistic⋁Node,Any,Int64,ProbabilisticCircuits.MomentCache}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.moment_fg","text":"Calculating  E[g^k * f]\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.vMI-Tuple{Any,Any,Any,Array{UInt32,1},Any}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.vMI","text":"Pick the variable with maximum sum of mutual information\n\n\n\n\n\n","category":"method"},{"location":"api/internals/probabilistic_circuits/#ProbabilisticCircuits.vRand-Tuple{Array{UInt32,1}}","page":"Probabilistic Circuits","title":"ProbabilisticCircuits.vRand","text":"Pick the variable randomly\n\n\n\n\n\n","category":"method"},{"location":"manual/learning/#man-learning-1","page":"Learning PCs","title":"Learning PCs","text":"","category":"section"},{"location":"manual/learning/#Paramter-Learning-1","page":"Learning PCs","title":"Paramter Learning","text":"","category":"section"},{"location":"manual/learning/#Structure-Learning-1","page":"Learning PCs","title":"Structure Learning","text":"","category":"section"},{"location":"manual/queries/#man-queries-1","page":"Queries","title":"Queries","text":"","category":"section"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"In this section, we go over most common probabilistic reasoning tasks, and provide code snippets to compute those queries. ","category":"page"},{"location":"manual/queries/#Setup-1","page":"Queries","title":"Setup","text":"","category":"section"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"First, we load some pretrained PC, and the corresponding data.","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"# This is needed to hide output from downloading artifacts\nusing LogicCircuits # hide\nusing ProbabilisticCircuits; #hide\npc = zoo_psdd(\"plants.psdd\")\ndata, _, _ = twenty_datasets(\"plants\");","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"using LogicCircuits # hide\nusing ProbabilisticCircuits; #hide\npc = zoo_psdd(\"plants.psdd\")\ndata, _, _ = twenty_datasets(\"plants\");\nprintln(\"circuit with $(num_nodes(pc)) nodes and $(num_parameters(pc)) parameters.\")\nprintln(\"dataset with $(num_features(data)) features and $(num_examples(data)) examples.\")","category":"page"},{"location":"manual/queries/#Full-Evidence-(EVI)-1","page":"Queries","title":"Full Evidence (EVI)","text":"","category":"section"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"EVI refers to computing the probability when full evidence is given, i.e. when x is fully oberserved, the output is p(x). We can use EVI method to compute logp(x):","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"probs = EVI(pc, data);\nprobs[1:3]","category":"page"},{"location":"manual/queries/#Partial-Evidence-(MAR)-1","page":"Queries","title":"Partial Evidence (MAR)","text":"","category":"section"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"In this case we have some missing values. Let x^o denote the observed features, and x^m the missing features. We would like to compute p(x^o) which is defined as p(x^o) = sum_x^m p(x^o x^m). Of course, computing this directly by summing over all possible ways to fill the missing values is not tractable. ","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"The good news is that given a smooth and decomposable PC, the marginal can be computed exactly and in linear time to the size of the PC.","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"First, we randomly make some features go missing:","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"using DataFrames\nfunction make_missing(d::DataFrame;keep_prob=0.8)    \n    m = missings(Bool, num_examples(data), num_features(data)) \n    flag = rand(num_examples(data), num_features(data)) .<= keep_prob\n    m[flag] .= Matrix(d)[flag] \n    DataFrame(m) \nend; \ndata_miss = make_missing(data);\nnothing #hide","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"Now, we can use MAR to compute the marginal queries:","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"probs = MAR(pc, data_miss);\nprobs[1:3]","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"Note that MAR can also be used to compute probabilisties even if all data is observed, in fact it should give the same results as EVI. However, if we know all features are observed, we suggest using EVI as its faster in general.","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"probs_mar = MAR(pc, data);\nprobs_evi = EVI(pc, data);\n\nprobs_mar ≈ probs_evi","category":"page"},{"location":"manual/queries/#Conditionals-(CON)-1","page":"Queries","title":"Conditionals (CON)","text":"","category":"section"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"In this case, given observed features x^o, we would like to compute p(Q mid x^o), where Q is a subset of features disjoint with x^o. We can leverage Bayes rule to compute conditionals as two seperate MAR queries as follows:","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"p(q mid x^o) = cfracp(q x^o)p(x^o)","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"Currently, this has to be done manually by the user. We plan to add a simple API for this case in the future.","category":"page"},{"location":"manual/queries/#Maximum-a-posteriori-(MAP,-MPE)-1","page":"Queries","title":"Maximum a posteriori (MAP, MPE)","text":"","category":"section"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"In this case, given the observed features x^o the goal is to fill out the missing features in a way that p(x^m x^o) is maximized.","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"We can use the MAP method to compute MAP, which outputs the states that maximize the probability and returns the probabilities themselves.","category":"page"},{"location":"manual/queries/#","page":"Queries","title":"Queries","text":"data_miss = make_missing(data,keep_prob=0.5);\nstates, probs = MAP(pc, data_miss);\nprobs[1:3]","category":"page"},{"location":"manual/queries/#Probability-of-logical-Events-1","page":"Queries","title":"Probability of logical Events","text":"","category":"section"},{"location":"manual/queries/#Expected-Prediction-1","page":"Queries","title":"Expected Prediction","text":"","category":"section"},{"location":"manual/queries/#Same-Decision-Probability-1","page":"Queries","title":"Same Decision Probability","text":"","category":"section"},{"location":"installation/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/#Prerequisites-1","page":"Installation","title":"Prerequisites","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"Julia 1.5 or greater. For installation, please refer to the official Julia Website.","category":"page"},{"location":"installation/#Installing-ProbabilisticCircuits-1","page":"Installation","title":"Installing ProbabilisticCircuits","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"You can use Julia's package manager, Pkg, to install this module and its dependencies. There are different options on how to do that, for example through command line or julia REPL. For more information and options on how to use Julia pacakge manager, please refer to Pkg's Documentation.","category":"page"},{"location":"installation/#From-Command-Line-1","page":"Installation","title":"From Command Line","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"To install the latest stable release, run:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"julia -e 'using Pkg; Pkg.add(\"ProbabilisticCircuits\")'","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"You can also install the package with the latest commits on master branch. In that case, its also recommented to install the latest LogicCircuits:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"julia -e 'using Pkg; Pkg.add([PackageSpec(url=\"https://github.com/Juice-jl/LogicCircuits.jl.git\"),PackageSpec(url=\"https://github.com/Juice-jl/ProbabilisticCircuits.jl.git\")])'","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"note: Note\nTo get to Pkg mode, you need to run julia, then to press ]. Press backspace or ^C to get back to normal REPL mode.","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"While in Pkg mode, run the following to install the latest release:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"add ProbabilisticCircuits","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"Similarly, to install from the latest commits on master branch, run:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"add LogicCircuits#master\nadd ProbabilisticCircuits#master","category":"page"},{"location":"installation/#Testing-1","page":"Installation","title":"Testing","text":"","category":"section"},{"location":"installation/#","page":"Installation","title":"Installation","text":"If you are installing the latest commit, we recommend running the test suite to make sure everything is in order, to do that run:","category":"page"},{"location":"installation/#","page":"Installation","title":"Installation","text":"julia --color=yes -e 'using Pkg; Pkg.test(\"ProbabilisticCircuits\")'","category":"page"},{"location":"api/internals/loadsave/#api-internal-loadsave-1","page":"LoadSave","title":"LoadSave","text":"","category":"section"},{"location":"api/internals/loadsave/#","page":"LoadSave","title":"LoadSave","text":"Modules = [ProbabilisticCircuits.LoadSave]","category":"page"},{"location":"api/internals/loadsave/#LogicCircuits.LoadSave.save_as_dot-Tuple{String,ProbCircuit}","page":"LoadSave","title":"LogicCircuits.LoadSave.save_as_dot","text":"Save prob circuits to .dot file\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#LogicCircuits.LoadSave.save_circuit-Tuple{String,StructProbCircuit,LogicCircuits.PlainVtree}","page":"LoadSave","title":"LogicCircuits.LoadSave.save_circuit","text":"Save a circuit to file\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.load_logistic_circuit-Tuple{String,Int64}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.load_logistic_circuit","text":"Load a logistic circuit from file. Support circuit file formats:     * \".circuit\" for logistic files Supported vtree file formats:     * \".vtree\" for Vtree files\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.load_prob_circuit-Tuple{String}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.load_prob_circuit","text":"Load a probabilistic circuit from file. Support circuit file formats:     * \".psdd\" for PSDD files\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.load_struct_prob_circuit-Tuple{String,String}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.load_struct_prob_circuit","text":"Load a structured probabilistic circuit from file. Support circuit file formats:     * \".psdd\" for PSDD files Supported vtree file formats:     * \".vtree\" for Vtree files\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.save_as_logistic-Tuple{String,LogisticCircuit,Any}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.save_as_logistic","text":"Save a logistic circuit to file\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.save_as_psdd-Tuple{String,ProbCircuit,LogicCircuits.PlainVtree}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.save_as_psdd","text":"Save a circuit to PSDD file format\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.compile_logistic-Tuple{AbstractArray{var\"#s116\",1} where var\"#s116\"<:LogicCircuits.LoadSave.CircuitFormatLine,Int64}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.compile_logistic","text":"Compile lines into a logistic circuit.\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.compile_prob-Tuple{AbstractArray{var\"#s116\",1} where var\"#s116\"<:LogicCircuits.LoadSave.CircuitFormatLine}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.compile_prob","text":"Compile lines into a probabilistic circuit\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.compile_struct_prob-Tuple{AbstractArray{var\"#s116\",1} where var\"#s116\"<:LogicCircuits.LoadSave.CircuitFormatLine,AbstractArray{var\"#s116\",1} where var\"#s116\"<:LogicCircuits.LoadSave.VtreeFormatLine}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.compile_struct_prob","text":"Compile circuit and vtree lines into a structured probabilistic circuit (one whose logic circuit origin is structured).\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.decompile-Tuple{StructProbLiteralNode,Any,Any}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.decompile","text":"Decompile for psdd circuit, used during saving of circuits to file\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.parse_clt-Tuple{String}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.parse_clt","text":"Parse a clt from given file\n\n\n\n\n\n","category":"method"},{"location":"api/internals/loadsave/#ProbabilisticCircuits.LoadSave.psdd_header-Tuple{}","page":"LoadSave","title":"ProbabilisticCircuits.LoadSave.psdd_header","text":"Returns header for PSDD file format\n\n\n\n\n\n","category":"method"},{"location":"#ProbabilisticCircuits.jl-1","page":"Home","title":"ProbabilisticCircuits.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This module provides a Julia implementation of Probabilistic Circuits (PCs),  tools to learn structure and parameters of PCs from data, and tools to do tractable exact inference with them. ","category":"page"},{"location":"#What-are-Probabilistic-Circuits?-1","page":"Home","title":"What are Probabilistic Circuits?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Probabilistic Circuits provides a unifying framework for several family of tractable probabilistic models. PCs are represented as a computational graphs that define a joint probability distribution as recursive mixtures (sum units) and factorizations (product units) of simpler distributions (input units).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Given certain structural properties, PCs enable different range of tractable exact probabilistic queries such as computing marginals, conditionals, maximum a posteriori (MAP), and more advanced probabilistic queries.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In additon to parameters, the structure of PCs can also be learned from data. There are several approaches in learning PCs, while keeping the needed structural constrains intact. Currently, This module includes implementation for few of these approaches with plans to add more over time.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Additionally, parallelism (on both CPU and GPU) is leveraged to provide faster implementation of learning and inference.","category":"page"},{"location":"#Where-to-learn-more-about-them?-1","page":"Home","title":"Where to learn more about them?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For an overview of the motivation and theory behind PCs, you can start by watching the ECML-PKDD tutorial on Probabilistic Circuits. ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Probabilistic Circuits: Representations, Inference, Learning and Theory (Video)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For more details and additional references, you can refer to:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Probabilistic Circuits: A Unifying Framework for Tractable Probabilistic Models (PDF)","category":"page"},{"location":"api/public/#api-public-1","page":"Public APIs","title":"Public APIs","text":"","category":"section"},{"location":"api/public/#","page":"Public APIs","title":"Public APIs","text":"This page lists documentation for the most commonly used public APIs of ProbabilisticCircuits.jl. Visit the internals section for a auto generated documentation for more public API and internal APIs.","category":"page"},{"location":"api/public/#","page":"Public APIs","title":"Public APIs","text":"Pages = [\"public.md\"]","category":"page"},{"location":"api/public/#Loading-Circuits-1","page":"Public APIs","title":"Loading Circuits","text":"","category":"section"},{"location":"api/public/#","page":"Public APIs","title":"Public APIs","text":"load_prob_circuit\nload_struct_prob_circuit\nload_logistic_circuit","category":"page"},{"location":"api/public/#ProbabilisticCircuits.LoadSave.load_prob_circuit","page":"Public APIs","title":"ProbabilisticCircuits.LoadSave.load_prob_circuit","text":"Load a probabilistic circuit from file. Support circuit file formats:     * \".psdd\" for PSDD files\n\n\n\n\n\n","category":"function"},{"location":"api/public/#ProbabilisticCircuits.LoadSave.load_struct_prob_circuit","page":"Public APIs","title":"ProbabilisticCircuits.LoadSave.load_struct_prob_circuit","text":"Load a structured probabilistic circuit from file. Support circuit file formats:     * \".psdd\" for PSDD files Supported vtree file formats:     * \".vtree\" for Vtree files\n\n\n\n\n\n","category":"function"},{"location":"api/public/#ProbabilisticCircuits.LoadSave.load_logistic_circuit","page":"Public APIs","title":"ProbabilisticCircuits.LoadSave.load_logistic_circuit","text":"Load a logistic circuit from file. Support circuit file formats:     * \".circuit\" for logistic files Supported vtree file formats:     * \".vtree\" for Vtree files\n\n\n\n\n\n","category":"function"},{"location":"api/public/#Saving-Interface-1","page":"Public APIs","title":"Saving Interface","text":"","category":"section"},{"location":"api/public/#","page":"Public APIs","title":"Public APIs","text":"save_circuit\nsave_as_psdd\nsave_as_logistic\nsave_as_dot","category":"page"},{"location":"api/public/#LogicCircuits.LoadSave.save_circuit","page":"Public APIs","title":"LogicCircuits.LoadSave.save_circuit","text":"Save a circuit to file\n\n\n\n\n\n","category":"function"},{"location":"api/public/#ProbabilisticCircuits.LoadSave.save_as_psdd","page":"Public APIs","title":"ProbabilisticCircuits.LoadSave.save_as_psdd","text":"Save a circuit to PSDD file format\n\n\n\n\n\n","category":"function"},{"location":"api/public/#ProbabilisticCircuits.LoadSave.save_as_logistic","page":"Public APIs","title":"ProbabilisticCircuits.LoadSave.save_as_logistic","text":"Save a logistic circuit to file\n\n\n\n\n\n","category":"function"},{"location":"api/public/#LogicCircuits.LoadSave.save_as_dot","page":"Public APIs","title":"LogicCircuits.LoadSave.save_as_dot","text":"Save prob circuits to .dot file\n\n\n\n\n\n","category":"function"},{"location":"api/public/#Learning-Circuits-1","page":"Public APIs","title":"Learning Circuits","text":"","category":"section"},{"location":"api/public/#","page":"Public APIs","title":"Public APIs","text":"learn_parameters\nlearn_chow_liu_tree_circuit\nlearn_single_model","category":"page"},{"location":"api/public/#ProbabilisticCircuits.Logistic.learn_parameters","page":"Public APIs","title":"ProbabilisticCircuits.Logistic.learn_parameters","text":"Parameter learning through gradient descents Note: data need to be DataFrame and Labels need to be in one-hot form.\n\n\n\n\n\n","category":"function"},{"location":"api/public/#ProbabilisticCircuits.learn_chow_liu_tree_circuit","page":"Public APIs","title":"ProbabilisticCircuits.learn_chow_liu_tree_circuit","text":"Learning from data a structured-decomposable circuit with several structure learning algorithms\n\n\n\n\n\n","category":"function"},{"location":"api/public/#ProbabilisticCircuits.learn_single_model","page":"Public APIs","title":"ProbabilisticCircuits.learn_single_model","text":"Learn structure decomposable circuits\n\n\n\n\n\n","category":"function"},{"location":"api/public/#Circuit-Queries-1","page":"Public APIs","title":"Circuit Queries","text":"","category":"section"},{"location":"api/public/#","page":"Public APIs","title":"Public APIs","text":"marginal\nmax_a_posteriori","category":"page"},{"location":"api/public/#ProbabilisticCircuits.marginal","page":"Public APIs","title":"ProbabilisticCircuits.marginal","text":"Evaluate marginals of the circuit bottom-up for a given input\n\n\n\n\n\n","category":"function"},{"location":"api/public/#ProbabilisticCircuits.max_a_posteriori","page":"Public APIs","title":"ProbabilisticCircuits.max_a_posteriori","text":"Evaluate maximum a-posteriori state of the circuit for a given input\n\n\n\n\n\n","category":"function"},{"location":"api/public/#Compilation-1","page":"Public APIs","title":"Compilation","text":"","category":"section"},{"location":"api/public/#","page":"Public APIs","title":"Public APIs","text":"compile_sdd_from_clt","category":"page"},{"location":"api/public/#ProbabilisticCircuits.compile_sdd_from_clt","page":"Public APIs","title":"ProbabilisticCircuits.compile_sdd_from_clt","text":"Compile a psdd circuit from clt and vtree\n\n\n\n\n\n","category":"function"}]
}
